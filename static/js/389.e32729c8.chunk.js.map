{"version":3,"file":"static/js/389.e32729c8.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactsItem/ContactsItem.module.css?8722","components/ContactsItem/ContactsItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","redux/contacts/contacts-selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/views/ContactsView/ContactsView.module.css?919f","views/ContactsView/ContactsView.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactsItem_item__pedOi\",\"button\":\"ContactsItem_button__uPo7U\"};","import PropTypes from 'prop-types';\nimport s from './ContactsItem.module.css';\n\nconst ContactsItem = ({ name, number, phone, onClick }) => (\n  <li className={s.item}>\n    <p>\n      {name}: &nbsp;{number || phone}\n    </p>\n    <button type=\"button\" className={s.button} onClick={onClick}>\n      Remove\n    </button>\n  </li>\n);\nContactsItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string,\n  phone: PropTypes.string,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ContactsItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { useEffect } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport {\n  fetchContacts,\n  deleteContact,\n} from '../../redux/contacts/contacts-operations';\nimport PropTypes from 'prop-types';\nimport ContactsItem from '../ContactsItem';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact, isLoading }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(fetchContacts()), [dispatch]);\n\n  return (\n    <>\n      {isLoading ? (\n        <h1 style={{ textAlign: 'center', marginTop: 20 }}>Loading...</h1>\n      ) : (\n        <ul className={s.list}>\n          {contacts.map(({ id, name, number, phone }) => (\n            <ContactsItem\n              key={id}\n              name={name}\n              number={number || phone}\n              onClick={() => onDeleteContact(id)}\n            />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string,\n      phone: PropTypes.string,\n    })\n  ),\n};\n\nconst getVisibleContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter, loading } }) => ({\n  contacts: getVisibleContacts(items, filter),\n  isLoading: loading,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","export const getContacts = state => state.contacts.items;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import React, { useState } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ onSubmit }) {\n  const contacts = useSelector(getContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (contacts.some(contact => contact.name === name)) {\n      return alert(`${name} is already in contacts!`);\n    }\n\n    onSubmit({ name, number });\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          className={s.input}\n          required\n          value={name}\n          onChange={handleInputChange}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          className={s.input}\n          required\n          value={number}\n          onChange={handleInputChange}\n        />\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: text => dispatch(addContact(text)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"title\":\"Filter_title__pSkfx\",\"input\":\"Filter_input__N7T3z\"};","import { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <label className={s.label}>\n      <span className={s.title}>Find contacts by name</span>\n      <input\n        type=\"text\"\n        className={s.input}\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: event => dispatch(contactsActions.changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsView_container__Ijx1k\",\"titleFhonebook\":\"ContactsView_titleFhonebook__kSCLR\",\"titleContacts\":\"ContactsView_titleContacts__grg3p\"};","import ContactList from '../../components/ContactList/ContactList';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport s from './ContactsView.module.css';\n\nexport default function ContactsView() {\n  return (\n    <div className={s.container}>\n      <div>\n        <h1 className={s.titleFhonebook}>Phonebook</h1>\n        <ContactForm />\n      </div>\n      <div>\n        <h2 className={s.titleContacts}>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    </div>\n  );\n}"],"names":["name","number","phone","onClick","className","s","type","getVisibleContacts","contacts","filter","normalizedFilter","toLowerCase","contact","includes","connect","items","loading","isLoading","dispatch","onDeleteContact","id","deleteContact","useDispatch","useEffect","fetchContacts","style","textAlign","marginTop","map","getContacts","state","onSubmit","text","addContact","useSelector","useState","setName","setNumber","handleInputChange","event","target","value","reset","e","preventDefault","some","alert","required","onChange","contactsActions","ContactsView"],"sourceRoot":""}